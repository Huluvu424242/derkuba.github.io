{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "der_kuba",
  "language": "de",
  "home_page_url": "https://derkuba.de/",
  "feed_url": "https://derkuba.de/feed/feed.json",
  "description": "IT Blog mit Tipps und Tricks aus dem Arbeitsalltag eines Software-Enwicklers",
  "author": {
    "name": "Jacob Pawlik",
    "url": "https://derkuba/about-me/"
  },
  "items": [{
      "id": "https://derkuba.de/content/posts/0521/flutter-import-sqlite-db/",
      "url": "https://derkuba.de/content/posts/0521/flutter-import-sqlite-db/",
      "title": "How to import SQlite Database File in Flutter (Android)",
      "content_html": "<p>Vor kurzem habe ich erklärt wie man aus seiner App die  <a href=\"https://www.sqlite.org/index.html\">SQlite-Datenbank</a> exportiert. In diesem Artikel erkläre ich wie man diese importiert. Voraussetzung ist ein bestehendes Flutter-Projekt und ein SQlite-Datenbank im Download-Verzeichnis des Telefons. <!-- endOfPreview --></p>\n<p>Benötigte Bibliotheken sind folgende:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token key atrule\">dependencies</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">flutter</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">    <span class=\"token key atrule\">sdk</span><span class=\"token punctuation\">:</span> flutter</span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">sqflite</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">permission_handler</span><span class=\"token punctuation\">:</span> ^7.0.0</span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">downloads_path_provider</span><span class=\"token punctuation\">:</span> ^0.1.0</span></code></pre>\n<p>Die Vorgehensweise strukturiert sich folgendermaßen:</p>\n<ol>\n<li>Lege eine neue Seite für den Import an und gebe den Dateipfad hinein</li>\n<li>Lese Dateien aus dem Download-Verzeichnis und filtere nach <em>&quot;.db&quot;</em></li>\n<li>Zeige die Dateien an.</li>\n<li>Kopiere diese in das Datenbankverzeichnis</li>\n</ol>\n<p>Ich gehe davon aus, dass mehrere Dateien für den Import zur Verfügung stehen und man den Nutzer vor die Wahl stellen kann, welche er importieren möchte. Für die Auswahl aus einer Liste bieten sich Radiobuttons an. In Flutter gibt es dazu die <em><strong>RadioListTile</strong></em>:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\">String selectedFile <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span><br><span class=\"highlight-line\">RadioListTile<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span></span><br><span class=\"highlight-line\">    title<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span>path <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// Der Titel ist der Pfad der Datei</span></span><br><span class=\"highlight-line\">    value<span class=\"token punctuation\">:</span> fileName<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>             <span class=\"token comment\">//  und der Wert ebenfalls.</span></span><br><span class=\"highlight-line\">    groupValue<span class=\"token punctuation\">:</span> selectedFile<span class=\"token punctuation\">,</span>        <span class=\"token comment\">//   Zum Anzeigen der Auswahl benötigt man eine Merkvariable, die den ausgewählten Wert repräsentiert.</span></span><br><span class=\"highlight-line\">    onChanged<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>String value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">//    In der Change-Funktion wird diese Merkervariabel ge- und überschrieben. </span></span><br><span class=\"highlight-line\">      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        selectedFile <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Das Ganze sieht dann aus wie folgt:</p>\n<p><img src=\"/content/img/0521/import_ui.png\" alt=\"Dateiauswahl\" title=\"Dateiauswahl\"><div class=\"has-text-right image-subline\">Bild 1: RadioListTile in Aktion</div></p>\n<p>Der grüne Knopf im unteren Bereich heißt <em><strong>FloatingActionButton</strong></em> und hat auf seiner onPressed-Methode folgende Funktion:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\">  <span class=\"token function\">_importDB</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>selectedFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedFile <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">      <span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>status<span class=\"token punctuation\">.</span>isGranted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">var</span> srcFile <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>selectedFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">var</span> dbFileBytes <span class=\"token operator\">=</span> srcFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAsBytesSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> ByteData<span class=\"token punctuation\">.</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span>dbFileBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">final</span> buffer <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">var</span> databasesPath <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDatabasesPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">var</span> distPath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>databasesPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'doggy__${DateTime.now()}.db'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">await</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>distPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAsBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">asUint8List</span><span class=\"token punctuation\">(</span></span><br><span class=\"highlight-line\">            dbFileBytes<span class=\"token punctuation\">.</span>offsetInBytes<span class=\"token punctuation\">,</span> dbFileBytes<span class=\"token punctuation\">.</span>lengthInBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">      <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span></code></pre>\n<p>Im ersten Teil prüfen wir, ob eine Datei ausgewählt wurde und im Anschluss ob wir überhaupt Lese- und Schreibezugriff auf dem Smartphone haben. Wir holen, bzw. lesen dann die Datei aus dem Downloadverzeichnis aus (Zeile 9-12). Dann lesen wir den Pfad des Downloadverzeichnis aus und bauen aus dem Pfad und dem Dateinamen einen neuen Pfad (Zeile 14-15). In Zeile 17+18 schreiben wir die Datei in das Datenbankverzeichnis des Telefons.</p>\n<p>Natürlich kann man hier jetzt viele verschiedene Variationen einbauen. So kann man z.B. die alte Datenbankdatei erstmal umbenennen und als Backup vorhalten. Alternativ kann man die alte Datei auch löschen. Wichtig ist, dass man in der laufenden Anwendung die aktuelle Datenbank schließt und neu ausliest, denn sonst hat die alten Daten im Speicher und muss die App erstmal neustarten.</p>\n<p>PS: Ab Android 11 (targetSdkVersion 30) wurde einiges am Rechtemanagement umgestellt. Das hat z.B. den Effekt, dass man die DB-Dateien aus APP A in APP B im Download-Verzeichnis nicht sehen kann. Um dies zu umgehen bin ich in meinen Apps auf targetSdkVersion 29 geblieben bis alle benötigten Flutter-Plugins targetSdkVersion 30 auch ausreichend unterstützen.</p>\n",
      "date_published": "2021-05-13T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0521/bewerbungsgespraech-leiten/",
      "url": "https://derkuba.de/content/posts/0521/bewerbungsgespraech-leiten/",
      "title": "Vorstellungsgespräche leiten, ein gutes Gespräch für beide Seiten.",
      "content_html": "<p>Jeder arbeitende Mensch hat schon an einem Vorstellungsgespräch teilgenommen. Wer schon mal die Gelegenheit hatte am anderen Ende des Tisches zu sitzen, wird sich über folgende Tipps freuen. Viele von uns werden, meistens vom Chef, ins kalte Wasser geworfen. Er kommt um die Ecke und möchte, dass man sich zusammen einen Kandidaten anschaut. Vielleicht sogar ganz alleine ohne HR und ohne Chef. Natürlich reicht die Arbeitserfahrung aus, um ein fachliches Gespräch zu führen. Das denkt man zumindest. Dann nimmt das Chaos seinen Lauf.<br>\nIch habe aus meiner Erfahrung, um dieses Chaos einzufangen, einige Tipps zusammengestellt. Damit geht der Kandidat und du als Interviewer mit einem guten Gefühl aus dem Gespräch.Ich konzentriere mich auf das Fachgespräch und nicht auf das HR Gespräch. Im Idealfall ist man unter sich (unter Software-Entwicklern). <!-- endOfPreview --></p>\n<h4 id=\"1.-der-rote-faden%3A-halte-ihn-fest-und-kommuniziere-ihn.\">1. Der rote Faden: Halte ihn fest und kommuniziere ihn. <a class=\"direct-link\" href=\"#1.-der-rote-faden%3A-halte-ihn-fest-und-kommuniziere-ihn.\">#</a></h4>\n<p>Denke dir eine Agenda für das Gespräch aus, kommuniziere sie an den Kandidaten (am Besten am Anfang des Gesprächs) und halte dich auch daran. Ich war schon in einigen Gesprächen, in denen ich nach der Begrüßung mit Fragen bombardiert wurde. Viele dieser Fragen hätte man vermeiden können, indem man mir eine Gelegenheit geboten hätte, mich vorzustellen. Ein roter Faden könnte wie folgt aussehen:</p>\n<ul>\n<li>Begrüßung, Klärung der Getränke, Smalltalk</li>\n<li>Kommunikation des &quot;roten Fadens&quot;, bzw. der Gesprächsagenda</li>\n<li>Vorstellung des Unternehmens</li>\n<li>Vorstellung aller Interviewer</li>\n<li>Klärung möglicher Fragen bis zu diesem Zeitpunkt</li>\n<li>Vorstellung Kandidat</li>\n<li>Gegenseitiges Kennenlernen durch Fachfragen</li>\n<li>Fragen des Kandidaten klären</li>\n<li>Kurzes Feedback</li>\n<li>Erklärung wie es weitergeht im Bewerbungsprozess</li>\n<li>Verabschiedung</li>\n</ul>\n<p>Der Kandidat weiß was auf ihn zukommt und das nimmt auch etwas seine Nervosität. Der Interviewer kann sich auf das Beobachten und Fragen konzentrieren und muss keine Agenda improvisieren.</p>\n<pre><code>Bereite dich auf das Gespräch und den Ablauf vor! \nGebe dem Gesprächsführer (deinem Kollegen oder sogar deinem Chef) Feedback, sollte er diesen Tipp nicht kennen.\n</code></pre>\n<hr/>\n<h4 id=\"2.-vor-dir-sitzt-ein-potentieller-kollege\">2. Vor dir sitzt ein potentieller Kollege <a class=\"direct-link\" href=\"#2.-vor-dir-sitzt-ein-potentieller-kollege\">#</a></h4>\n<p>Auf der anderen Seite des Tisches vor dem Kandidaten zu sitzen, bedeutet, dass man eine kleine Machtposition für diesen Moment inne hat. Man stellt die Fragen und leitet das Gespräch. In dieser Situation habe ich des öfteren erlebt, wie der sonst nette und freundliche Kollege sich veränderte. Von der freundlichen Art blieb nicht viel übrig und es wurde eine fiese Frage nach der anderen gestellt, als würde man versuchen den Kandidaten fertig zu machen. Es gilt bei dem Gespräch nicht die Schwächen des Kandidaten aufzuzeigen, sondern seine Stärken.Man klärt die Frage ob und wie der Kandidat im Team dem Unternehmen helfen kann. Wer möchte es sich denn schon am Anfang mit einem neuen und potentiellen Kollegen verscherzen? Heutzutage in der Situation des Entwicklermangels bewirbt man sich auch beim Kandidaten, weil die Nachfrage so groß ist. Das sollte man während des Gesprächs im Hinterkopf behalten.</p>\n<pre><code>Gewinne einen neuen Kollegen und vernichte ihn nicht!\n</code></pre>\n<hr/>\n<h4 id=\"3.-stelle-keine-fragen%2C-auf-die-du-selber-keine-antwort-wei%C3%9Ft\">3. Stelle keine Fragen, auf die du selber keine Antwort weißt <a class=\"direct-link\" href=\"#3.-stelle-keine-fragen%2C-auf-die-du-selber-keine-antwort-wei%C3%9Ft\">#</a></h4>\n<p>Ich habe in meinem vorherigen Artikel den Hinweis gegeben einen Block und einen Stift dabeizuhaben und Fragen, die man nicht beantworten kann, sich erklären zu lassen. Leider habe ich als Kandidat, als ich die Frage zurückgegeben habe, um etwas neues zu lernen, in verzweifelte Gesichter geschaut. Es wurde nervös geblättert und schnell die nächste Frage gestellt. Es ist leicht eine Fragen, die man sich aus dem Internet holt, zu stellen. Aber man sollte auch Herr der Antwort auf diese Frage sein. Es macht auch keinen guten Eindruck vor dem Kandidaten (und deinem Chef) in so eine Situation zu geraten.</p>\n<pre><code>Überlege dir die Fragen vorher und beantworte sie für dich!\n</code></pre>\n<hr/>\n<h4 id=\"4.-erz%C3%A4hle-die-wahrheit-und-besch%C3%B6nige-nicht-unn%C3%B6tig\">4. Erzähle die Wahrheit und beschönige nicht unnötig <a class=\"direct-link\" href=\"#4.-erz%C3%A4hle-die-wahrheit-und-besch%C3%B6nige-nicht-unn%C3%B6tig\">#</a></h4>\n<p>Man möchte den Kandidaten für das Unternehmen gewinnen und das führt manchmal dazu, dass man anfängt Märchen zu erzählen. Das Unternehmen wird plötzlich vollständig Agil, es gibt freie Technologiewahl, überall sind grüne Wiesen für neue Projekte und Legacy-System kennt man nur aus dem Refactoring-Buch. Ein gut vorbereiteter Kandidat durchschaut diese Lügen mit ein paar Gegenfragen. Dies erzeugt wieder eine sehr unangenehme Situation. Man sollte bei der Wahrheit bleiben und vielleicht sogar von ein paar Problemen erzählen, die man mit Hilfe des Kandidaten angehen möchte. Aber auch hier ist vorsicht geboten. Zu viele negative Geschichten können abschreckend wirken.</p>\n<pre><code>Bleibe bei der Wahrheit und erzähle keine Märchen!\n</code></pre>\n<hr/>\n<h4 id=\"5.-zeige-aufrichtiges-interesse-und-h%C3%B6r-aktiv-zu\">5. Zeige aufrichtiges Interesse und hör aktiv zu <a class=\"direct-link\" href=\"#5.-zeige-aufrichtiges-interesse-und-h%C3%B6r-aktiv-zu\">#</a></h4>\n<p>Für diesen Tipp ist etwas selbstreflexion notwendig. Jeder Mensch möchte am Liebsten immer von sich und seinen Erfahrungen erzählen. Das ist absolut in Ordnung. Allerdings ist ein Bewerbungsgespräch der falsche Rahmen, um von sich zu sprechen. Im Mittelpunkt steht einzig und allein der Kandidat. Man hat nur eine begrenzte Zeit, den potentiellen Kollegen einzuschätzen und zu bewerten. Das eine oder andere Mal musste ich mich, bzw. meine beisitzenden Kollegen in ihren Ausführungen über Technologien und ihre Erfahrungen bremsen. Der Kandidat sollte das Wort haben. Stelle ihm fragen über seine Arbeitsweisen, Technologien, Erfahrungen etc. und höre ihm auch zu. Mache dir dazu Notizen, die du später für das Feedback gegenüber der HR brauchst. Schenke dem Kandidaten deine ungeteilte Aufmerksamkeit. Als Kandidat war ich in einigen Gesprächen, in denen die Gesprächsführer auf ihrem Laptop oder auf Handy rumgetippt haben. Ich hatte das Gefühl ich rede mit mir selbst. Ein anderes Mal hing der Chef über seinen Stuhl und schaute gelangweilt drein. Das macht keinen guten Eindruck.</p>\n<pre><code>Du bist nicht der Mittelpunkt bei dem Gespräch. Informiere dich über aktives Zuhören.\n</code></pre>\n<hr/>\n<h4 id=\"6.-achte-auf-das-mindset-des-kandidaten\">6. Achte auf das Mindset des Kandidaten <a class=\"direct-link\" href=\"#6.-achte-auf-das-mindset-des-kandidaten\">#</a></h4>\n<p>In den Nachbesprechungen mit den Kollegen der HR wurden viele Kandidaten oft aussortiert, weil sie nicht über die notwendige Erfahrungen in dem benötigten Tech-Stack verfügten. Das halte ich für falsch. Wenn ein Kandidat das richtige Mindset, sprich die richtige Einstellung hat, habe ich immer für ihn gestimmt. Technologien, Arbeitsweisen, agile Methoden etc. kann man leichter dem Kandidaten beibringen. Wenn aber schon die Kinderstube fehlt, keine Motivation zu spüren ist oder die Teamfähigkeit zweifelhaft ist, dann ist das viel schlimmer. Wenn ein Kandidat spürbar für eine Sache brennt und unbedingt ein Thema lernen möchte, ist das die beste Vorraussetzung für eine gute Zusammenarbeit. Meine Leitfrage bei jedem Gespräch ist immer: &quot;Möchte ich diese Person in meinem Team haben?&quot;.</p>\n<pre><code>Technologien und Methoden biegen sich leider gerade als fehlende Softskills.\n</code></pre>\n<hr/>\n<h4 id=\"7.-gib-konstruktives-feedback\">7. Gib konstruktives Feedback <a class=\"direct-link\" href=\"#7.-gib-konstruktives-feedback\">#</a></h4>\n<p>Am Ende des Gesprächs gebe ich immer ein Feedback wie sich der Kandidat geschlagen hat. Damit meine ich nicht, ob eine Anstellungen folgen wird, sondern wie das Gespräch verlaufen ist. Dabei gebe ich Tipps zum Vortragen des Lebenslaufs, lobe Stärken und mache auf Schwächen aufmerksam. Man sollte tunlichst vermeiden dem Kandidaten Hoffnung auf die Anstellung zu machen oder diese sogar in Aussicht zu stellen. Als Fachkollege hat man keine Kompetenz dazu und macht das Unternehmen angreifbar. Ich meine konstruktives Feedback zur Weiterentwicklung der Fähigkeiten und des Charakters. Als Einleitung eignet sich beispielhaft die Frage wie der Kandidat denkt, dass das Gespräch verlaufen ist. Daran kann man anknüpfen und ein gutes Feedback geben, warum oder warum nicht das Gespräch gut gelaufen ist.</p>\n<pre><code>Helfe dem Kandidaten sich weiterzuentwickeln.\n</code></pre>\n",
      "date_published": "2021-05-07T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0521/flutter-export-sqlite-db/",
      "url": "https://derkuba.de/content/posts/0521/flutter-export-sqlite-db/",
      "title": "How to export SQlite Database File in Flutter (Android)",
      "content_html": "<p>Eine der vielen Möglichkeiten für das Speichern von Daten innerhalb einer <a href=\"https://flutter.dev/\">Flutter-App</a> ist <a href=\"https://www.sqlite.org/index.html\">SQlite</a>. SQlite bietet eine Relationale-Datenbank innerhalb der App ohne externe Ahhänigkeit und ohne Datenverkehr über das Internet. <!-- endOfPreview -->Es ist sehr praktisch und für kleinere, einfachere Statements performant. Wer eine Übersicht über die Möglichkeiten zum Speichern von Daten innerhalb von Flutter sucht, dem empfehle ich folgenden <a href=\"https://objectbox.io/flutter-databases-sqflite-hive-objectbox-and-moor/\">Artikel  (flutter-databases-sqflite-hive-objectbox-and-moor)</a>. <a href=\"https://flutter.dev/docs/cookbook/persistence/sqlite\">Die Flutter-Doku</a> erklärt sehr gut wie man SQlite in seiner App integriert.</p>\n<p>Ich habe eine App gebaut, die Daten in der SQlite abspeichert. Nun stand ich vor dem Problem wie ich die Daten migrieren kann, falls ich z.B. das Handy wechsle. Da SQlite die Daten in eine *.db Datei schreibt, muss es eine Möglichkeit geben an diese Datei auf dem Telefon zu gelangen und diese aus der App zu exportieren. Wie man das erreichen kann, möchte ich mit euch teilen.</p>\n<p>Voraussetzung ist eine Flutter App und folgende Bibliotheken:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"highlight-line\"><span class=\"token key atrule\">dependencies</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">flutter</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">    <span class=\"token key atrule\">sdk</span><span class=\"token punctuation\">:</span> flutter</span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">sqflite</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span></span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">permission_handler</span><span class=\"token punctuation\">:</span> ^7.0.0</span><br><span class=\"highlight-line\">  <span class=\"token key atrule\">downloads_path_provider</span><span class=\"token punctuation\">:</span> ^0.1.0</span></code></pre>\n<ul>\n<li><strong>sqflite</strong>: SQlite-Bibliothek</li>\n<li><strong>path</strong>: Pfade</li>\n<li><strong>permission_handler</strong>: Rechte auf dem Gerät</li>\n<li><strong>downloads_path_provider</strong>: Pfad zum Downloads-Ordner</li>\n</ul>\n<p>Die Idee der Umsetzung war folgende:</p>\n<ol>\n<li>Überprüfe die Schreibrechte auf dem Gerät.</li>\n<li>Finde den Pfad zur *.db-Datei.</li>\n<li>Öffne diese Datei und schreibe eine Kopie in das Download-Verzeichnis des Telefons.</li>\n</ol>\n<br/> \n<h4 id=\"1.-schreibrechte\">1. Schreibrechte <a class=\"direct-link\" href=\"#1.-schreibrechte\">#</a></h4>\n<p>Damit man Dateien auf dem Telefon schreiben und lesen kann, benötigt man Schreibrechte. <strong>Achtung!</strong> Ich beziehe mich hier nur auf das Android-System.<br>\nUm an Schreibrechte zu gelangen muss man folgende Zeilen in die Datei <em><strong>/android/app/src/main/AndroidManifest.xml</strong></em> hinzufügen.</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"highlight-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.READ_EXTERNAL_STORAGE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></span><br><span class=\"highlight-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></span></code></pre>\n<p>Damit der Nutzer überhaupt mitbekommt, dass diese Rechte benötigt werden, empfehle ich das Paket <em>permission_handler</em>. Damit kann man den Nutzer komfortabel auf Schreibrechte hinweisen und diese direkt auch abfragen.</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\"><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isDenied<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Die erste Zeile fragt das System an, ob überhaupt Rechte in der oben beschriebenen xml eingetragen wurden und dann das Telefon, ob der Telefonnutzer die Rechte freigegeben hat. Die dritte Zeile lässt einen Dialog erscheinen, der dem Nutzer diese Auwahl anbietet.</p>\n<p><img src=\"/content/img/0521/right-granted.png\" alt=\"schreibrechte\" title=\"schreibrechte\"></p>\n<p>Wurden diese Rechte erlaubt, können wir die Dateien schreiben.</p>\n<h4 id=\"2.-dateipfade\">2. Dateipfade <a class=\"direct-link\" href=\"#2.-dateipfade\">#</a></h4>\n<p>Die Dateipfade sind etwas versteckt und wir benötigen die oben genannten Module als Hilfe.</p>\n<p><strong>Pfad zur bestehenden Datenbank.db</strong></p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\">String dbName <span class=\"token operator\">=</span> <span class=\"token string\">\"doggie_database.db\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name of the db</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">var</span> databasesPath <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDatabasesPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default database path</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">var</span> innerPath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>databasesPath<span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>innerPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token comment\">// /data/user/0/com.example.flutter_sqlite_database_export/databases/doggie_database.db</span></span></code></pre>\n<p><strong>Pfad ins Downloadverzeichnis</strong></p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\">Directory tempDir <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> DownloadsPathProvider<span class=\"token punctuation\">.</span>downloadsDirectory<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">String tempPath <span class=\"token operator\">=</span> tempDir<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span></span></code></pre>\n<p><strong>Ausflug in dein Android-Datenbankverzeichnis</strong><br>\nWer in seine bestehende und laufende Applikation reinschauen möchte, dem empfehle ich im Android-Studio den <em><strong>Device-File-Explorer</strong></em>.</p>\n<p><img src=\"/content/img/0521/file-explorer.png\" alt=\"device file explorer\" title=\"device file explorer\"></p>\n<p>Unter <em><strong>/data/data/[name eurer applikation]/databases/nameEurerDB.db</strong></em> findet ihr eure SQlite Datenbank und könnte diese exportieren.</p>\n<h4 id=\"3.-datenbank.db-exportieren\">3. Datenbank.db exportieren <a class=\"direct-link\" href=\"#3.-datenbank.db-exportieren\">#</a></h4>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\"><span class=\"token keyword\">var</span> dbFile <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>innerPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">var</span> filePath <span class=\"token operator\">=</span> tempPath <span class=\"token operator\">+</span> <span class=\"token string\">'/$dbName'</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">var</span> dbFileBytes <span class=\"token operator\">=</span> dbFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAsBytesSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> ByteData<span class=\"token punctuation\">.</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span>dbFileBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">final</span> buffer <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token function\">File</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAsBytes</span><span class=\"token punctuation\">(</span></span><br><span class=\"highlight-line\">  buffer<span class=\"token punctuation\">.</span><span class=\"token function\">asUint8List</span><span class=\"token punctuation\">(</span> </span><br><span class=\"highlight-line\">    dbFileBytes<span class=\"token punctuation\">.</span>offsetInBytes<span class=\"token punctuation\">,</span> dbFileBytes<span class=\"token punctuation\">.</span>lengthInBytes</span><br><span class=\"highlight-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Die Datenbank-Datei wird als Bytes gelesen, und im Standard Dart I/O Verfahren von einem Ort zum anderen geschrieben. So erhält man eine Datenbank-Export für die in der App verwendete Datenbank.</p>\n<p>Hier nochmal die ganze Methode samt Aufruf:</p>\n<pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"highlight-line\">Future<span class=\"token operator\">&lt;</span>File<span class=\"token operator\">></span> <span class=\"token function\">_writeDBFileToDownloadFolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    String dbName <span class=\"token operator\">=</span> <span class=\"token string\">\"doggie_database.db\"</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> databasesPath <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDatabasesPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> innerPath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>databasesPath<span class=\"token punctuation\">,</span> dbName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>innerPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">    Directory tempDir <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> DownloadsPathProvider<span class=\"token punctuation\">.</span>downloadsDirectory<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    String tempPath <span class=\"token operator\">=</span> tempDir<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> dbFile <span class=\"token operator\">=</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>innerPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> filePath <span class=\"token operator\">=</span> tempPath <span class=\"token operator\">+</span> <span class=\"token string\">'/$dbName'</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> dbFileBytes <span class=\"token operator\">=</span> dbFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAsBytesSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> ByteData<span class=\"token punctuation\">.</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span>dbFileBytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">final</span> buffer <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">return</span> <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAsBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">asUint8List</span><span class=\"token punctuation\">(</span></span><br><span class=\"highlight-line\">        dbFileBytes<span class=\"token punctuation\">.</span>offsetInBytes<span class=\"token punctuation\">,</span> dbFileBytes<span class=\"token punctuation\">.</span>lengthInBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span><br><span class=\"highlight-line\">onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isDenied<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">await</span> Permission<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">  File file <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">_writeDBFileToDownloadFolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// not null safe </span></span><br><span class=\"highlight-line\">    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span><br><span class=\"highlight-line\"></span></code></pre>\n<p>Schaut man nun auf dem Telefon über die App &quot;Files&quot; in das Downloadverzeichnis, findet man die besagte Datei.</p>\n<p>Great Success! :-)</p>\n<p>Diese Code-Blöcke eingebacken in die Flutter-Starter-Applikation habe ich unter <a href=\"https://github.com/derKuba/flutter-sqlite-database-export\">Github</a> für euch zur Verfügung gestellt.</p>\n<p>Ihr habt Fragen oder Anregungen? Schreibt mir bei <a href=\"https://twitter.com/der_kuba\">Twitter</a></p>\n<p><em><strong>Nachtrag vom 07.05.2021</strong></em><br>\nAuf Android Q reicht der oben erwähnte Zusatz in der XML nicht aus. Man muss noch folgendes ergänzen:</p>\n<pre><code>  android:requestLegacyExternalStorage=&quot;true&quot;\n</code></pre>\n<p>sodass die <em><strong>/android/app/src/main/AndroidManifest.xml</strong></em> wie folgt aussieht:</p>\n<pre><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; \n  package=&quot;com.example.flutter_sqlite_database_export&quot;&gt;\n  &lt;application\n    android:label=&quot;flutter_sqlite_database_export&quot;\n    android:requestLegacyExternalStorage=&quot;true&quot;\n    android:icon=&quot;@mipmap/ic_launcher&quot;&gt;\n    ....\n    &lt;/application&gt;\n    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;\n    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;\n&lt;/manifest&gt;\n</code></pre>\n",
      "date_published": "2021-05-02T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0421/typescript-spread-operator-aha/",
      "url": "https://derkuba.de/content/posts/0421/typescript-spread-operator-aha/",
      "title": "Spass mit Typescript: Spread-Operator AHA-Moment",
      "content_html": "<p>Diese Woche bin ich über den Spread-Operator gestolpert und möchte diese Erfahrung teilen. <!-- endOfPreview --></p>\n<p>Folgendes Szenario:<br>\nIch möchte ein Objekt erstellen, dass aus einem Key &quot;Name eines Testfalls&quot; und als Value ein weiteres Objekt aus benannnte Zahlenpaaren enthält. Ich habe dazu ein Array aus Namen der Testfälle und ein ein Objekt, das ein Objektschema enthält.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> testCases <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testcase 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testcase 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testcase 3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">     <span class=\"token string\">\"first\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token string\">\"second\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token string\">\"third\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Aus den Namen und dem Schema, soll dann ein großes Objekt entstehen, das wie folgt aussieht.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> testDataDefaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token string\">\"testcase 0\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token string\">\"first\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">            a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">         <span class=\"token string\">\"second\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">            a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">         <span class=\"token string\">\"third\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">            a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            c<span class=\"token operator\">:</span> <span class=\"token number\">0</span></span><br><span class=\"highlight-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token operator\">...</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Man schreibt ganz schnell eine kleine Schleife über die Namen der Testfälle, initiiert das Sammelobjekt und setzt für jeden Testfall das Schema:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> testDataDefaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">testCases<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>testCase <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    testDataDefaults<span class=\"token punctuation\">[</span>testCase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Die Zeile {...numbers} erzeugt ein Klon des Schemas und weißt ihm dann dem Namen des Testfalls zu.</p>\n<p>Dieses DefaultObjekt wird dann im nächsten Schritt mit echten Daten gefüllt. Mein erster Ansatz ohne viel nachzudenken war wie folgt:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\">testDataDefaults<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">testDataDefaults<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">testDataDefaults<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Meine Erwartung war, dass im ersten Testcase das &quot;first&quot;-Objekt an der Stelle &quot;a&quot; die Zahl 23 enthält. Die Wahrheit sah anders aus:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 0'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token operator\">...</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Waaaaaat.</p>\n<p>Laut <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_f%C3%BCr_objektliterale\">https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_für_objektliterale</a> hätte doch alles klappen sollen.</p>\n<p>Schnell mal googeln wie man sonst noch Objekte klonen kann:</p>\n<p><a href=\"https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/\">https://www.samanthaming.com/tidbits/70-3-ways-to-clone-objects/</a></p>\n<p>Also nochmal von vorne und das mit allen 3 Lösungen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\">tests<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>testCase <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    spreadMapped<span class=\"token punctuation\">[</span>testCase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    jsonMapped<span class=\"token punctuation\">[</span>testCase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><br><span class=\"highlight-line\">    objectAssignMapped<span class=\"token punctuation\">[</span>testCase<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">jsonMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">jsonMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">jsonMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">objectAssignMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">objectAssignMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">objectAssignMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>und das Ergebnis ist auch etwas durchwachsen:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\"><span class=\"token comment\">// spread</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 0'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token operator\">...</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"><span class=\"token comment\">// json</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 0'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    <span class=\"token operator\">...</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token comment\">// Object assign</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 0'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token operator\">...</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Der Spreadoperator und das Object.assign halten nicht so ganz was sie im ersten Moment versprechen. Ich bin über die Formulierung &quot;flache Klonen&quot; gestolpert. Es wird zwar das Defaultobjekt geklont, allerdings bleiben die Referenzen von &quot;first&quot;, &quot;second&quot;, &quot;third&quot; erhalten. Das JSON-Konstrukt geht über das flache Klonen hinaus.</p>\n<p>Die Zuweisung über spreadMapped[&quot;testcase 0&quot;].first.a = 23; funktioniert nicht. Man muss das zugewiesene Object mit einem frischen Objekt überschreiben:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"highlight-line\">spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    <span class=\"token operator\">...</span>spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token operator\">...</span>spreadMapped<span class=\"token punctuation\">[</span><span class=\"token string\">\"testcase 0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        a<span class=\"token operator\">:</span> <span class=\"token number\">23</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token comment\">// output</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 0'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">  <span class=\"token string\">'testcase 1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">    first<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    second<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">    third<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n<p>Das war mein hartes Learning der Woche. Code gibts unter<br>\n<a href=\"https://github.com/derKuba/fun-with-typescript/tree/main/240121-spread-aha-moment\">Code gibts unter</a></p>\n<p>Ihr habt Fragen oder Anregungen? Schreibt mir bei <a href=\"https://twitter.com/der_kuba\">Twitter</a></p>\n",
      "date_published": "2021-04-24T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0421/so-klappt-jedes-vorstellungsgespraech/",
      "url": "https://derkuba.de/content/posts/0421/so-klappt-jedes-vorstellungsgespraech/",
      "title": "So klappt fast jedes Vorstellungsgespräch",
      "content_html": "<p>In den letzten Jahren konnte ich in weit über hundert Vorstellungsgesprächen reichlich Erfahrung sammeln, sei es als Kandidat oder als technischer Fachkollege. Diese Erfahrung habe ich in folgende Punkte gepackt, die jedes Gespräch erfolgreicher machen. <!-- endOfPreview -->Als Software-Entwickler beziehe ich mich ausschließlich auf die IT-Branche. Die Tipps sind bestimmt auch in anderen Branchen zu gebrauchen, aber das kann ich nicht näher bewerten.</p>\n<h4 id=\"1.-%C3%BCbung-macht-den-meister\">1. Übung macht den Meister <a class=\"direct-link\" href=\"#1.-%C3%BCbung-macht-den-meister\">#</a></h4>\n<p>Je öfter man sich der Situation des Bewerbungsgespräches stellt, desto sicherer tritt man auf. Ich empfehle das Gespräch mit Freunden oder Familie zu üben. Sollte niemand verfügbar sein, empfehle ich das Bewerben auf Stellen, die man gar nicht unbedingt antreten möchte.</p>\n<p><strong><em>Regel:</em> Geht zu jedem Bewerbungsgespräch zu dem ihr eingeladen werdet!</strong></p>\n<hr/>\n<h4 id=\"2.-dein-lebenslauf-ist-eine-geschichte\">2. Dein Lebenslauf ist eine Geschichte <a class=\"direct-link\" href=\"#2.-dein-lebenslauf-ist-eine-geschichte\">#</a></h4>\n<p>Viele Kandidaten können Ihren Lebenslauf nicht geordnet, chronologisch und frei erzählen. Man stellt als Interviewer immer wieder die gleichen Fragen, damit man eine Vergleichbarkeit der Kandidaten erreicht. Hier kann man sehr leicht punkten, wenn man seine Meilensteine flüssig vortragen kann.</p>\n<ul>\n<li>Dabei fängt man am besten beim Schulabschluss an</li>\n<li>Welche Motivation gab es für das Studium oder die Ausbildung?</li>\n<li>Was waren die Schwerpunkte des Studiums/der Ausbildung?</li>\n<li>Darauf folgt eine Beschreibung der bisherigen Jobs. Hierbei gilt es herauszustellen, was man <strong>selber</strong> für Aufgaben erfüllt hat und nicht, was die Firma gemacht hat: Was waren die wesentlichen Aufgaben und die eingesetzten Technologien? Was hat man gelernt?</li>\n<li>Der nächste Punkte ist die Motivation für die Neuausrichtung: Was hat mich beim letzten Arbeitgeber dazu bewegt mich jetzt hier in dieser Firma zu bewerben? <strong>Achtung:</strong> Nicht die letzte Firma schlecht machen, sondern die Schwachpunkte als Lernziele im neuen Unternehmen nennen.</li>\n<li>Zum Schluss sollte man den Bogen zur aktuellen Firma spannen: Was erhoffe ich mir von der neuen Firma?</li>\n<li><em>Gut:</em> neue Technologie, agile Arbeitsweise, viele Teams, Mentoren, interessante Branche</li>\n<li><em>Schlecht:</em> Gehalt, Aufstieg, weniger Arbeit</li>\n</ul>\n<hr/>\n<h4 id=\"3.-wer-f%C3%BChrt-das-interview%3F\">3. Wer führt das Interview? <a class=\"direct-link\" href=\"#3.-wer-f%C3%BChrt-das-interview%3F\">#</a></h4>\n<p>In der Terminbestätigung zum Gespräch stehen oft die Teilnehmer des Gesprächs. Diese Gelegenheit sollte immer genutzt werden und ich empfehle die teilnehmenden Personen zu recherchieren:</p>\n<ul>\n<li>Wenn eine Person aus der HR/Personalabteilung dabei ist, sollte man die klassischen Bewerbungsfragen (Stärke/Schwächen, größte Erfolge, wo sehe ich mich in fünf Jahre etc.) üben, bzw. vorbereiten.<br>\n<strong>Sei im Stande die Standard-HR-Fragen zu beantworten</strong></li>\n<li>Interessant wird es wenn ein Leiter/Chef und ein Fachkollege dabei sind. In diesem Fall sollte man die eigene Technologie-Liste durchgehen und nachschauen, ob man zu jeder Technologie auch tiefere Fragen beantworten kann. <strong>Fachsimpeln hilft. Oft möchte der Fachkollege vor dem Chef beweisen, wie viel er weiß und kommt nicht dazu, Fragen zu stellen.</strong></li>\n</ul>\n<hr/>\n<h4 id=\"4.-m%C3%B6chten-sie-was-trinken%3F-ja\">4. Möchten Sie was trinken? Ja <a class=\"direct-link\" href=\"#4.-m%C3%B6chten-sie-was-trinken%3F-ja\">#</a></h4>\n<p>Niemals das Getränk ablehnen. Man glaubt gar nicht wie oft die Stimme versagt. Wenn jetzt jemand los muss, um ein Getränk zu besorgen, macht es die Gesprächsdynamik kaputt. So ein Schluck Wasser bietet auch immer die Möglichkeit zum Nachdenken, und/oder um die Nervosität zu besiegen.<br>\n<strong><em>Regel:</em> Immer das Getränk annehmen!</strong></p>\n<hr/>\n<h4 id=\"5.-du-kannst-die-frage-nicht-beantworten%3F\">5. Du kannst die Frage nicht beantworten? <a class=\"direct-link\" href=\"#5.-du-kannst-die-frage-nicht-beantworten%3F\">#</a></h4>\n<p>Das ist absolut kein Problem. Aber bitte fang nicht an zu faseln und denk dir nicht irgendwas aus. Jeder erfahrene Kollege wird sofort deine Unsicherheit merken und dir eventuell absagen. Antworte ehrlich, dass du es nicht weißt und gib die Frage zurück. Der Fachkollege erklärt die sicherlich vor dem Chef in aller Ausführlichkeit die Antwort und du konntest was dazulernen.</p>\n<hr/>\n<h4 id=\"6.-unbequeme-klamotten\">6. Unbequeme Klamotten <a class=\"direct-link\" href=\"#6.-unbequeme-klamotten\">#</a></h4>\n<p>Leider zu häufig sitzen vor mir potentielle Kollegen im Anzug. Sie schwitzen, fummeln sich am Kragen herum und der Anzug sitzt zu eng oder zu weit. Man merkte deutlich, dass sie sich nicht wohlfühlen. Es ist nicht schlimm vorher den täglichen Dresscode zu erfragen. Die Webseite des Unternehmens zeigt deutlich was dort kleidungstechnisch zu erwarten ist. Kleider machen zwar Leute, zeigen aber auch deutlich, ob du dich wohlfühlst. Wenn man keine Anzüge mag, ist eine Stoffhose mit Polohemd total in Ordnung. Hierbei gilt es zu beachten, ob man sich als Consultant bewirbt oder für eine Inhouse-Entwicklung.<br>\nEin gepflegtes Äußeres und saubere Kleidung sind absolut ausreichend. Es muss nicht immer der Anzug sein.</p>\n<hr/>\n<h4 id=\"7.-stift-und-block\">7. Stift und Block <a class=\"direct-link\" href=\"#7.-stift-und-block\">#</a></h4>\n<p>Nur einer von fünfzehn Kandidaten bringt etwas zu schreiben mit. Das halte ich für grob fahrlässig. Wie bereits erklärt, kann man sich Fragen, auf die man keine Antwort wusste, notieren. Notierenswert sind auch:</p>\n<ul>\n<li>Unbekannte Technologien</li>\n<li>Kunden</li>\n<li>Goodies</li>\n<li>Teamgröße / Arbeitsweisen</li>\n<li>... etc</li>\n</ul>\n<p>Durch die Nervosität hat man nach dem Gespräch oft vieles wieder vergessen. Außerdem wirkt man interessiert und gut organisiert, wenn man sich ab und zu etwas notiert.</p>\n<hr/>\n<h4 id=\"8.-haben-sie-noch-fragen%3F\">8. Haben Sie noch Fragen? <a class=\"direct-link\" href=\"#8.-haben-sie-noch-fragen%3F\">#</a></h4>\n<p>Die Kandidaten ohne Stift und Block haben in der Regel eine oder zwei Fragen. Die anderen Fragen fallen ihnen nicht mehr ein. Das ist fatal. Wenn man keine Fragen hat, hat man sich nicht mit dem Unternehmen auseinandergesetzt. Es zeigt z.B.,</p>\n<ul>\n<li>dass man unvorbereitet kommt,</li>\n<li>dass man kein Interesse an der Arbeitsweise</li>\n<li>oder an der Unternehmensstruktur hat</li>\n</ul>\n<p>Mein schönstes Bewerbungsgespräch als Kandidat hatte ich als das potentielle neue Team mich in die Zange nehmen wollte. Ich saß alleine im Kreis, umringt vom Team. Da ich aber meinen Block mit unendlich vielen Fragen hatte, konnte ich den Spieß umdrehen.<br>\nFolgende Aspekte eignen sich gut für Fragen:</p>\n<ul>\n<li>Teamgröße und Arbeitsweise?</li>\n<li>Wie sieht ein Arbeitsalltag aus (von morgens bis abends)?</li>\n<li>Wie wird Agilität gelebt?</li>\n<li>Wie wird Qualität sichergestellt?</li>\n<li>Wie ist der Ablauf eines Features vom Konzept bis zum Live-Deployment?</li>\n<li>Wie, wann und womit wird deployed?</li>\n<li>Wie arbeiten die Teams miteinander und wie läuft die Kommunikation?</li>\n<li>Stellt euch euren optimalen Arbeitsalltag vor und stellt dazu Fragen auf.</li>\n</ul>\n<hr/>\n<h4 id=\"9.-gespr%C3%A4chs(n)ettikette\">9. Gesprächs(n)ettikette <a class=\"direct-link\" href=\"#9.-gespr%C3%A4chs(n)ettikette\">#</a></h4>\n<p>Es hört sich zwar selbstverständlich an, ist es aber leider viel zu oft nicht:</p>\n<ul>\n<li>Pünktlichkeit</li>\n<li>aufrecht sitzen,</li>\n<li>kein Hibbeln</li>\n<li>Augenkontakt</li>\n<li>vollständige Sätze</li>\n<li>aussprechen lassen<br>\nViele Vergehen kann man sicherlich mit der Nervosität begründen und sie sind auch nachvollziehbar. Sie hinterlassen jedoch schnell einen negativen Eindruck beim Interviewer. Doch daran kann man arbeiten. Ich empfehle zur Übung ein kurzes Rollenspiel, das aufgenommen, oder durch Dritte beobachtet wird, die einem Feedback geben</li>\n</ul>\n<hr/>\n<h4 id=\"10.-was-motiviert-dich%3F\">10. Was motiviert dich? <a class=\"direct-link\" href=\"#10.-was-motiviert-dich%3F\">#</a></h4>\n<p>Ich habe selten erlebt, dass unbedingt ein bestimmtes Skill-Set gesucht wird. Es geht immer um den Menschen dahinter. Man möchte eine bestimmte Einstellung/Attitüde finden. Alles andere kann man dem neuen Kollegen beibringen. Niemand wird (auf Dauer) einen genialen Entwickler, der nicht im Team arbeiten kann, keine anderen Meinungen akzeptiert und allen anderen das Leben zur Hölle macht, behalten oder überhaupt erst einstellen. Langer Rede, kurzer Sinn. Was treibt dich an? Was brauchst du zum Arbeiten? Was möchtest du lernen? In welche Richtung möchtest du dich weiterentwickeln? Beantworte diese Fragen für dich und bringe sie ungefragt in das Gespräch ein.</p>\n<p>Ihr habt Fragen oder Anregungen? Schreibt mir bei <a href=\"https://twitter.com/der_kuba\">Twitter</a></p>\n",
      "date_published": "2021-04-17T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0421/11nty-bullma-error/",
      "url": "https://derkuba.de/content/posts/0421/11nty-bullma-error/",
      "title": "Bulma und Prism.js erzeugen CSS-Fehler in der Darstellung",
      "content_html": "<p>Wer 11nty mit <a href=\"https://bulma.io/\">Bulma</a> als CSS-Framework nutzt und zusätzlich den Code-Highlighter <a href=\"https://prismjs.com/\">PrismJS </a> hinzufügt, bekommt folgenden Darstellungsfehler:</p>\n<p><img src=\"/content/img/0421/bulma-css-error.png\" alt=\"bulma css error\" title=\"Bulma-Prism-Css-Error\"></p>\n<p>Ich habe etwas recherchiert und bin auf folgdenen Artikel gestoßen:</p>\n<p><a href=\"https://www.darraghoriordan.com/2019/01/20/bulma-prismjs-in-gatsby-css-conflicts/\">https://www.darraghoriordan.com/2019/01/20/bulma-prismjs-in-gatsby-css-conflicts/</a></p>\n<p>Diesen Codeblog aus oben genanten Artikel in mein CSS kopiert und alles wird normalisieren. Alles funktioniert nun wie es soll:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.token.tag,<br><span class=\"highlight-line\">.token.content,</span><br>.token.number</span> <span class=\"token punctuation\">{</span><br><span class=\"highlight-line\">  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span></span></code></pre>\n",
      "date_published": "2021-04-05T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0421/11nty-excerpt/",
      "url": "https://derkuba.de/content/posts/0421/11nty-excerpt/",
      "title": "11nty Inhalt anzeigen in der Liste",
      "content_html": "<p>Wer in der Liste aller Posts zusätzlich den Inhalt anzeigen möchte, hat out-of-the-box nur die Möglichkeit den gesamten Inhalt anzuzeigen. Wenn man z.B. nur den ersten Satz eines Posts anzeigen möchte, muss dies dem Javascript von Eleventy noch beibringen. <!-- endOfPreview --></p>\n<p>Als Grundlage wird der <a href=\"https://github.com/11ty/eleventy-base-blog\">11nty-Starter-Blog</a> verwendet.</p>\n<p>Wenn man diesen startet, erhält man folgendes Bild. Es zeigt die Post-Liste mit Titel, Datum und Tags, aber ohne Auszug des Inhalts.<br>\n<img src=\"/content/img/0421/excerpt-place.png\" alt=\"11nty starter\" title=\"11nty starter\"></p>\n<div class=\"has-text-right image-subline\">Bild 1: Post-Liste im Starter Template</div>\n<p>Die rote Schrift zeigt den Ort an, an dem der Inhalt eingefügt werden soll.<br>\nFür die Umsetzung habe ich mich an folgenden Seiten orientiert:</p>\n<p><a href=\"https://github.com/muenzpraeger/eleventy-chirpy-blog-template\">https://github.com/muenzpraeger/eleventy-chirpy-blog-template</a> und<br>\n<a href=\"https://keepinguptodate.com/pages/2019/06/creating-blog-with-eleventy/\">https://keepinguptodate.com/pages/2019/06/creating-blog-with-eleventy/</a> .</p>\n<p>Die Datei <strong>.eleventy.js</strong> benötigt folgende Funktion:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"highlight-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">extractExcerpt</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">,</span> <span class=\"token string\">\"templateContent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>templateContent<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  <span class=\"token keyword\">const</span> markerIndex <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!-- endOfPreview -->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">  </span><br><span class=\"highlight-line\">  <span class=\"token keyword\">return</span> markerIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> markerIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"...\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Zunächst wird geprüft ob das Post-Object das Feld &quot;templateContent&quot; besitzt. Dies sollte von Eleventy bereitgestellt werden. Anschließend wird es in der Content-Variable gecached. Der Inhalt wird zerschnitten vom Anfang bis zum Schnippsel <strong>&quot;<!-- endOfPreview -->&quot;</strong>. Hier kann natürlich jedes beliebiges, aber möglichst vom Inhalt abhebendes Tag verwendet werden. Das ist ein Marker, der das Ende der Auszuges, bzw. der Vorschau, beschreibt. Wenn kein Marker gefunden wird, wird ein leerer String zurückgegeben.</p>\n<p>Nun muss Eleventy beigebracht werden, diese Funktion zu werden. Es wäre z.B. als Filter möglich, aber ein &quot;Shortcut&quot; erscheint für mich praktischer. Ein Shortcut sieht aus wie folgt:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"highlight-line\"><span class=\"token comment\">// remove whitespace between {} and %</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span> excerpt pageObject <span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span></span></code></pre>\n<p><em>Bitte die Leerzeichen entfernen zwischen den runden Klammern und dem Prozentzeichen. Leider rendert 11nty den Ausschnitt ohne Leerzeichen!</em></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"highlight-line\">eleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addShortcode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"excerpt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span><br><span class=\"highlight-line\">    <span class=\"token function\">extractExcerpt</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span></span><br><span class=\"highlight-line\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Das Eleventy-Config-Object nun ein neues Schlagwort &quot;excerpt&quot; (Auszug) und übergibt als Parameter wie im vorherigen Code-Snippet angezeigt das Postobjekt.</p>\n<p>Wenn man diesen Shortcut nun in der Datei <em>/_include/postlist.njk</em> innerhalb der Listen-Tags (&lt; li &gt; &lt;/ li &gt;) einfügt, erhält man seinen gewünschten Inhaltsauszug.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"highlight-line\"> <span class=\"token punctuation\">{</span> <span class=\"token operator\">%</span> excerpt post <span class=\"token operator\">%</span> <span class=\"token punctuation\">}</span></span></code></pre>\n<p>Dieser Marker kann jetzt in den Markdown-Dateien der Blogposts verwendet werden(<strong>/posts/*.md</strong>). Einfach nach gewünschter Länge des Auszuges das <strong>&lt; !-- endOfPreview -- &gt;</strong> einfügen.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"highlight-line\">Leverage agile frameworks to provide a robust <span class=\"token comment\">&lt;!-- endOfPreview --></span></span><br><span class=\"highlight-line\">synopsis for high level overviews. Iterative </span></code></pre>\n<p><img src=\"/content/img/0421/excerpt-final.png\" alt=\"11nty starter\" title=\"11nty starter\"><br>\n<img src=\"/content/img/0421/excerpt-place.png\" alt=\"11nty starter\" title=\"11nty starter\"></p>\n<div class=\"has-text-right image-subline\">Bild 2: Post-Liste mit Inhaltvorschau</div>\n<p><br>\nDie Codebeispiele findet ihr auf <a href=\"https://github.com/derKuba/eleventy-examples\">Github/derKuba</a>.</p>\n<p>Ihr habt Fragen oder Anregungen? Schreibt mir bei <a href=\"https://twitter.com/der_kuba\">Twitter</a></p>\n",
      "date_published": "2021-04-04T00:00:00Z"
    },{
      "id": "https://derkuba.de/content/posts/0421/11nty-tutorial-part-one/",
      "url": "https://derkuba.de/content/posts/0421/11nty-tutorial-part-one/",
      "title": "11nty Blog mit eigenem Html-Template",
      "content_html": "<p>Seit langer Zeit sitzt in meinem Kopf der Gedanke einen Blog aufzusetzen. Die Umsetzung möchte ich direkt als ersten Post nutzen. <!-- endOfPreview --> Als Anforderung habe ich folgende Punkte:</p>\n<ul>\n<li>keine Datenbank</li>\n<li>keine aufwendigen, runtime-bedürftigen Programmiersprachen</li>\n<li>Output soll eine statische Seite sein.</li>\n</ul>\n<p>Die Google-Suche &quot;static site generator 2021&quot; hat folgende Seite hervorgebracht:</p>\n<p><a href=\"https://www.techradar.com/best/static-site-generators\">https://www.techradar.com/best/static-site-generators</a></p>\n<p>An erster Stelle steht Hugo. Ein sehr schneller Generator, der auf GO setzt. Hugo hatte ich bereits ausprobiert. Es ist sehr schnell und einfach, solange man ein fertiges Template verwendet. Möchte man dagegen ein eigenes, war relativ viel Gefrickel notwenig ( Stand Hugo 0.40 ). Das muss doch einfacher gehen.<br>\nDa ich ein großes Herz für JS habe, las sich 11nty sehr gut. Es sollte schnell, einfach und ohne Frameworks wie React oder Angular auskommen. Und siehe da es ging sehr gut.</p>\n<p>Techstack:</p>\n<ul>\n<li><a href=\"https://git-scm.com/\">git</a></li>\n<li><a href=\"https://nodejs.org/de/\">nodejs @v14.16.0</a></li>\n<li><a href=\"https://www.npmjs.com/\">npm @6.14.11</a></li>\n<li><a href=\"https://www.11ty.dev/\">11nty @0.12.1 </a></li>\n<li><a href=\"https://bulma.io/\">Bulma @0.9.2</a></li>\n<li><a href=\"https://prismjs.com/\">prism @1.23.0 </a></li>\n</ul>\n<p>Mit folgenden Schritten habe ich diesen Blog aufgesetzt:</p>\n<ol>\n<li>\n<p><strong>HTML-Template erstellen</strong></p>\n<ul>\n<li>HTML-Grundstruktur mit\n<ul>\n<li>Menu,</li>\n<li>Navigation,</li>\n<li>Blogdetail</li>\n<li>Footer</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>11nty Starter</strong> Blog download unter: <a href=\"https://github.com/11ty/eleventy-base-blog\">https://github.com/11ty/eleventy-base-blog</a></p>\n<ul>\n<li>Starter-Template klonen und installieren</li>\n<li>Aufbau und Struktur</li>\n<li>Custom-Template überführen</li>\n</ul>\n</li>\n<li>\n<p>das <strong>HTML-Template</strong> in das Startertemplate überführen</p>\n</li>\n</ol>\n<h3 id=\"los-gehts\">Los gehts <a class=\"direct-link\" href=\"#los-gehts\">#</a></h3>\n<h4 id=\"vorbedingung\">Vorbedingung <a class=\"direct-link\" href=\"#vorbedingung\">#</a></h4>\n<ul>\n<li>Nodejs und NPM sind installiert</li>\n</ul>\n<h4 id=\"1.-template-anlegen\">1. Template anlegen <a class=\"direct-link\" href=\"#1.-template-anlegen\">#</a></h4>\n<p>Ein einfaches und klassisches HTML Layout ist schnell aufgesetzt. Um Zeit zu Sparen habe ich als CSS-Framework <a href=\"https://bulma.io/\">Bulma</a> genommen und das Template in folgende Teile geteilt:</p>\n<ul>\n<li><a href=\"https://bulma.io/documentation/components/navbar/\">Navigation</a></li>\n<li>Content</li>\n<li>Sidebar</li>\n<li><a href=\"https://bulma.io/documentation/layout/footer/\">Footer</a></li>\n</ul>\n<p><img src=\"/content/img/layout.png\" alt=\"html layout\" title=\"HTML Template\"></p>\n<div class=\"has-text-right image-subline\">Bild 1: Aufteilung Layout</div>\n<p><br>\nEs eignen sich auch andere Layouts und andere CSS-Frameworks. Ich hatte Lust auf eine Bootstrap-Alternative.</p>\n<h4 id=\"2.-11nty-starter-installieren\">2. 11nty Starter installieren <a class=\"direct-link\" href=\"#2.-11nty-starter-installieren\">#</a></h4>\n<p><a href=\"https://github.com/11ty/eleventy-base-blog\">Unter der oben genannten Adresse</a> findet man das Standard 11nty Starter Paket. Wenn man auf den &quot;Clone&quot;-Button klickt, erhält man die Git-Url.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token comment\"># für ssh</span></span><br><span class=\"highlight-line\"><span class=\"token function\">git</span> clone git@github.com:11ty/eleventy-base-blog.git mein-neuer-blog</span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\"><span class=\"token comment\"># oder https</span></span><br><span class=\"highlight-line\"><span class=\"token function\">git</span> clone https://github.com/11ty/eleventy-base-blog.git mein-neuer-blog</span></code></pre>\n<p>Nun muss man in den Ordner navigieren und die Abhängigkeiten installieren:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token builtin class-name\">cd</span> mein-neuer-blog</span><br><span class=\"highlight-line\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span></span></code></pre>\n<p><br>\n<strong>11nty Starter-Blog starten</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"highlight-line\"><span class=\"token function\">npm</span> run server</span><br><span class=\"highlight-line\"><span class=\"token comment\"># oder</span></span><br><span class=\"highlight-line\">npx eleventy --serve</span></code></pre>\n<p>und man sollte folgendes sehen:</p>\n<p><img src=\"/content/img/0421/11nty-starter.png\" alt=\"11nty starter\" title=\"11nty starter\"></p>\n<div class=\"has-text-right image-subline\">Bild 2: Ausschnitte Starter Template</div> \n<p><br>\nMan erkennt auf den ersten Blick, die dynamischen Elemente, die wir in unserem eigenen Template benötigen.</p>\n<ul>\n<li>Navigation: Menüpunkte</li>\n<li>Content: Posts</li>\n<li>Sidebar: die Tags</li>\n</ul>\n<p><img src=\"/content/img/0421/starter-elements.png\" alt=\"11nty starter elements\" title=\"11nty starter elements\"></p>\n<p><br>\n<strong>Aufbau und Dateistruktur</strong><br>\nFür etwas mehr Übersicht habe ich einige Dateien in Ordner aufgeteilt. CSS und JS habe ich in das Verzeichnis Template gezogen, Inhaltsspezifische Dateien in den Ordner &quot;Content&quot; und CI-spezifische Dateien habe ich gelöscht.</p>\n<p><img src=\"/content/img/0421/file-structure.png\" alt=\"Verzeichnisstruktur\" title=\"verzeichnisstruktur\"></p>\n<div class=\"has-text-right image-subline\">Bild 3: Verzeichnisstruktur</div> \n<p><br>\nDie Dateien untergliedern sich in</p>\n<ul>\n<li><strong>&quot;.njk&quot;</strong> (Template),</li>\n<li><strong>&quot;.md&quot;</strong> (Content / Posts)</li>\n<li><strong>&quot;.json&quot;</strong> ( Meta und Config )</li>\n<li><strong>&quot;.eleventy.js&quot;</strong> ( 11nty Konfiguration).</li>\n</ul>\n<p><br>\n<strong>Selbstgebautes Template verwenden</strong></p>\n<p>Navigation:</p>\n<ul>\n<li>neue Datei anlegen unter &quot;_includes/layouts/navigation.njk&quot;.</li>\n<li>inhalt der eigenen Navigation in diese Datei kopiert.</li>\n<li>unter &quot;_includes/layouts/base.njk&quot; findet man das Seitenlayout mit HTML-Struktur.<br>\nZeilen 13-23 beinhalten was wir benötigen. Wir entnehmen den metadata.title als Titel für unseren Blog und packen die for-Schleife (Z. 18-24)<br>\nin unsere nav-container.</li>\n</ul>\n<p>vorher:<br>\n<img src=\"/content/img/0421/starter-header.png\" alt=\"navigation\" title=\"Navigation\"><div class=\"has-text-right image-subline\">Bild 4: Code Starter-Header</div> (leider rendert an dieser Stelle 11nty den nunjuk-code und ich muss ein Bild verwenden. Vielleicht kennt jemand einen workaround?)</p>\n<p>nachher:<br>\n<img src=\"/content/img/0421/bulma-header.png\" alt=\"header\" title=\"Header\"></p>\n<div class=\"has-text-right image-subline\">Bild 5: Bulma Header</div>\nWir überführen die For-Schleife in den navigation-items container.\nAnschließend\n<ul>\n<li>in der &quot;base.njk&quot;-datei löschen wir nun den Inhalt wie er auf dem vorher-Bild zu sehen ist und ersetzen in durch <div class=\"clear-image\"><img src=\"/content/img/0421/include-header.png\" alt=\"Include Header\" title=\"Include Header\"></div> und die Datei sollte wie folgt aussehen:<br>\n<img src=\"/content/img/0421/base.png\" alt=\"Base Datei\" title=\"Base-Datei\"></li>\n</ul>\n<div class=\"has-text-right image-subline\">Bild 6: Starter-Template Base</div>\nNeben den eigenen CSS-Dateien, dem Bulma-Burger-Menu-Javascript, sieht man die Navigation und den Footer.\n<p><br>\n<strong>Content:</strong></p>\n<p>Der Content-Bereich unterscheidet sich jetzt je nachdem auf welcher Seite man sich befindet. Ich möchte, dass auf der Hauptseite die Sidebar sichtbar ist und auf den Post-Detailseiten nicht. Daher werden jetzt die vorgefertigten Dateien <strong>/_includes/layouts/</strong> <em>-home.njk</em> und <em>-postlist.njk</em> für die Hauptseite relevant und die<em>post.njk</em> Datei für die Detailseite.</p>\n<p>Für Content-Bereich wurde der Starter-Template Code mit dem eigenen Template verbunden:</p>\n<p><img src=\"/content/img/0421/content-area.png\" alt=\"content\" title=\"Content Bereicht\"></p>\n<div class=\"has-text-right image-subline\">Bild 7:Content Bereich</div>\n<p>Neben dem kopierten Standardcode entdeckt der findige Leser auch den Bereich in Zeile 19. Dort mappe ich anhand des Indexes die Bulma Tag Klassen an den Tag, um so ein wenig Farbe in den Seitenbereich zu bekommen. Dafür habe ich einen weiteren Short-Code angelegt in der <em>.eleventy.js-</em>Datei angelegt:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"highlight-line\">    eleventyConfig<span class=\"token punctuation\">.</span><span class=\"token function\">addPairedShortcode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"badge\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">const</span> badge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-black\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-primary\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-link\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-success\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-dark\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-warning\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">            <span class=\"token string\">\"is-danger\"</span><span class=\"token punctuation\">,</span></span><br><span class=\"highlight-line\">        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> badge<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><br><span class=\"highlight-line\">            <span class=\"token keyword\">return</span> badge<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">        <span class=\"token punctuation\">}</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> index <span class=\"token operator\">%</span> badge<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\"></span><br><span class=\"highlight-line\">        <span class=\"token keyword\">return</span> badge<span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><br><span class=\"highlight-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre>\n<p>Für den Detail-Bereich wurde der Starter-Template Code mit dem eigenen Template verbunden:</p>\n<p><img src=\"/content/img/0421/post-detail.png\" alt=\"post detail\" title=\"Post Detail Seite\"></p>\n<div class=\"has-text-right image-subline\">Bild 8: Detail Seite</div>\n<p>Für die List der Posts wurde der Starter-Template Code mit dem eigenen Template verbunden:</p>\n<p><img src=\"/content/img/0421/postlist.png\" alt=\"Post-List\" title=\"Liste aller Posts\"></p>\n<div class=\"has-text-right image-subline\">Bild 9: Detailseite Posts</div>\n<p>Auch hier verwende ich noch einen weitern Custom-Filter &quot;readingTime&quot;, den ich aus dem weiteren Starter-Template<br>\n<a href=\"https://github.com/muenzpraeger/eleventy-chirpy-blog-template/blob/main/.eleventy.js\">https://github.com/muenzpraeger/eleventy-chirpy-blog-template/blob/main/.eleventy.js</a> entnommen habe, um die Lesedauer anzuzeigen.</p>\n<p>Damit niemand den Code abtippen muss, habe ich die relevanten Dateien auf <a href=\"https://github.com/derKuba/eleventy-examples\">Github/derKuba</a> abgelegt.</p>\n",
      "date_published": "2021-03-30T00:00:00Z"
    }
  ]
}
